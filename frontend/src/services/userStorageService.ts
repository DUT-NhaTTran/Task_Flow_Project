import axios from 'axios';

// Interface cho User t·ª´ Users table
export interface UserProfile {
  id: string;
  username: string;
  email: string;
  avatar?: string;
  role?: string;
  createdAt?: string;
  updatedAt?: string;
  phoneNumber?: string;
  firstName?: string;
  lastName?: string;
}

// Interface cho Account t·ª´ Accounts table  
export interface AccountInfo {
  id: string;
  email: string;
  password?: string; // Don't store password in frontend
  isEmailVerified: boolean;
  emailVerificationToken?: string;
  resetPasswordToken?: string;
  resetPasswordExpires?: string;
  createdAt: string;
  updatedAt: string;
  lastLoginAt?: string;
  isActive: boolean;
}

// Interface cho th√¥ng tin ƒë·∫ßy ƒë·ªß khi login
export interface LoggedInUserData {
  account: AccountInfo;
  profile: UserProfile;
  loginTime: string;
  sessionToken?: string;
}

// Key ƒë·ªÉ l∆∞u trong localStorage
const USER_STORAGE_KEY = 'taskflow_logged_user';
const USER_SESSION_KEY = 'taskflow_user_session';

export class UserStorageService {
  
  /**
   * L∆∞u th√¥ng tin user v√†o localStorage khi login th√†nh c√¥ng
   */
  static saveLoggedInUser(accountData: AccountInfo, userProfile: UserProfile, sessionToken?: string): void {
    try {
      const loggedInData: LoggedInUserData = {
        account: {
          ...accountData,
          password: undefined // Never store password
        },
        profile: userProfile,
        loginTime: new Date().toISOString(),
        sessionToken: sessionToken
      };

      // L∆∞u v√†o localStorage
      localStorage.setItem(USER_STORAGE_KEY, JSON.stringify(loggedInData));
      
      // L∆∞u session token ri√™ng ƒë·ªÉ d·ªÖ truy c·∫≠p
      if (sessionToken) {
        localStorage.setItem(USER_SESSION_KEY, sessionToken);
      }

      // Log ƒë·ªÉ debug
      console.log('‚úÖ User data saved to localStorage:', {
        userId: userProfile.id,
        username: userProfile.username,
        email: accountData.email,
        loginTime: loggedInData.loginTime
      });

    } catch (error) {
      console.error('‚ùå Error saving user data to localStorage:', error);
    }
  }

  /**
   * L·∫•y th√¥ng tin user ƒë√£ login t·ª´ localStorage
   */
  static getLoggedInUser(): LoggedInUserData | null {
    try {
      const userData = localStorage.getItem(USER_STORAGE_KEY);
      if (!userData) {
        return null;
      }

      const parsedData: LoggedInUserData = JSON.parse(userData);
      
      // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa session (c√≥ th·ªÉ th√™m logic expire)
      if (!parsedData.account || !parsedData.profile) {
        console.warn('‚ö†Ô∏è Invalid user data in localStorage');
        this.clearLoggedInUser();
        return null;
      }

      return parsedData;
    } catch (error) {
      console.error('‚ùå Error reading user data from localStorage:', error);
      this.clearLoggedInUser();
      return null;
    }
  }

  /**
   * L·∫•y profile user hi·ªán t·∫°i
   */
  static getCurrentUserProfile(): UserProfile | null {
    const userData = this.getLoggedInUser();
    return userData?.profile || null;
  }

  /**
   * L·∫•y account info hi·ªán t·∫°i
   */
  static getCurrentAccount(): AccountInfo | null {
    const userData = this.getLoggedInUser();
    return userData?.account || null;
  }

  /**
   * L·∫•y session token
   */
  static getSessionToken(): string | null {
    return localStorage.getItem(USER_SESSION_KEY);
  }

  /**
   * Update th√¥ng tin profile user
   */
  static updateUserProfile(updatedProfile: Partial<UserProfile>): void {
    try {
      const currentData = this.getLoggedInUser();
      if (!currentData) {
        console.warn('‚ö†Ô∏è No user data to update');
        return;
      }

      const updatedData: LoggedInUserData = {
        ...currentData,
        profile: {
          ...currentData.profile,
          ...updatedProfile
        }
      };

      localStorage.setItem(USER_STORAGE_KEY, JSON.stringify(updatedData));
      console.log('‚úÖ User profile updated in localStorage');
    } catch (error) {
      console.error('‚ùå Error updating user profile:', error);
    }
  }

  /**
   * X√≥a th√¥ng tin user khi logout
   */
  static clearLoggedInUser(): void {
    try {
      localStorage.removeItem(USER_STORAGE_KEY);
      localStorage.removeItem(USER_SESSION_KEY);
      
      // X√≥a c√°c key c≈© n·∫øu c√≥
      localStorage.removeItem('username');
      localStorage.removeItem('userId');
      localStorage.removeItem('userEmail');
      localStorage.removeItem('user_name');
      localStorage.removeItem('userName');
      
      console.log('‚úÖ User data cleared from localStorage');
    } catch (error) {
      console.error('‚ùå Error clearing user data:', error);
    }
  }

  /**
   * Ki·ªÉm tra user c√≥ ƒëang login kh√¥ng
   */
  static isUserLoggedIn(): boolean {
    const userData = this.getLoggedInUser();
    return userData !== null && userData.account.isActive;
  }

  /**
   * Fetch v√† sync th√¥ng tin user m·ªõi nh·∫•t t·ª´ server
   */
  static async syncUserFromServer(userId: string): Promise<LoggedInUserData | null> {
    try {
      console.log('üîÑ Syncing user data from server for userId:', userId);

      // Fetch user profile t·ª´ Users service
      const userResponse = await axios.get(`http://localhost:8086/api/users/${userId}`);
      
      // Fetch account info t·ª´ Auth service  
      const accountResponse = await axios.get(`http://localhost:8088/api/auth/account/${userId}`);

      if (userResponse.data?.status === 'SUCCESS' && accountResponse.data?.status === 'SUCCESS') {
        const userProfile: UserProfile = userResponse.data.data;
        const accountInfo: AccountInfo = accountResponse.data.data;

        // L∆∞u th√¥ng tin m·ªõi v√†o localStorage
        this.saveLoggedInUser(accountInfo, userProfile, this.getSessionToken() || undefined);

        console.log('‚úÖ User data synced from server successfully');
        return this.getLoggedInUser();
      } else {
        console.error('‚ùå Failed to sync user data from server');
        return null;
      }
    } catch (error) {
      console.error('‚ùå Error syncing user data from server:', error);
      return null;
    }
  }

  /**
   * Migrate t·ª´ localStorage c≈© sang format m·ªõi
   */
  static migrateOldUserData(): void {
    try {
      // Ki·ªÉm tra xem ƒë√£ c√≥ data m·ªõi ch∆∞a
      if (this.getLoggedInUser()) {
        return; // ƒê√£ c√≥ data m·ªõi r·ªìi
      }

      // T√¨m data c≈©
      const oldUserId = localStorage.getItem('userId');
      const oldUsername = localStorage.getItem('username') || localStorage.getItem('user_name');
      const oldEmail = localStorage.getItem('userEmail');

      if (oldUserId && oldUsername) {
        console.log('üîÑ Migrating old user data to new format...');
        
        // T·∫°o data t·∫°m th·ªùi t·ª´ th√¥ng tin c≈©
        const tempAccount: AccountInfo = {
          id: oldUserId,
          email: oldEmail || '',
          isEmailVerified: true,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          isActive: true
        };

        const tempProfile: UserProfile = {
          id: oldUserId,
          username: oldUsername,
          email: oldEmail || ''
        };

        this.saveLoggedInUser(tempAccount, tempProfile);
        
        // Sau ƒë√≥ sync v·ªõi server ƒë·ªÉ l·∫•y data ƒë√∫ng
        this.syncUserFromServer(oldUserId);
        
        console.log('‚úÖ Old user data migrated successfully');
      }
    } catch (error) {
      console.error('‚ùå Error migrating old user data:', error);
    }
  }

  /**
   * L·∫•y display name cho user
   */
  static getUserDisplayName(): string {
    const profile = this.getCurrentUserProfile();
    if (!profile) return 'Unknown User';

    if (profile.firstName && profile.lastName) {
      return `${profile.firstName} ${profile.lastName}`;
    }
    
    return profile.username || profile.email || 'Unknown User';
  }

  /**
   * L·∫•y user initials cho avatar
   */
  static getUserInitials(): string {
    const displayName = this.getUserDisplayName();
    if (!displayName || displayName === 'Unknown User') return '?';
    
    return displayName
      .split(' ')
      .map(word => word.charAt(0).toUpperCase())
      .join('')
      .slice(0, 2);
  }

  /**
   * Debug: Log to√†n b·ªô th√¥ng tin user hi·ªán t·∫°i
   */
  static debugLogUserData(): void {
    const userData = this.getLoggedInUser();
    if (userData) {
      console.group('üîç Current User Data');
      console.log('üìß Account Info:', userData.account);
      console.log('üë§ Profile Info:', userData.profile);
      console.log('üïí Login Time:', userData.loginTime);
      console.log('üé´ Session Token:', userData.sessionToken ? '***' + userData.sessionToken.slice(-8) : 'None');
      console.groupEnd();
    } else {
      console.log('‚ùå No user logged in');
    }
  }
}

// Export default instance
export default UserStorageService; 